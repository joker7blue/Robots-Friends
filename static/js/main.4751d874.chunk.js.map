{"version":3,"sources":["RobotCardList/RobotCard/RobotCard.js","RobotCardList/RobotCardList.js","SearchBar/SearchBar.js","robotsData.js","App.js","serviceWorker.js","index.js"],"names":["robotCard","props","react_default","a","createElement","className","onClick","event","robotClick","name","email","src","alt","robotCardList","robotsList","robots","map","robot","index","RobotCard","key","searchBar","class","id","placeholder","type","aria-describedby","onChange","searchTyping","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleRobotClick","window","responsiveVoice","speak","handleSearch","robotsFilter","filter","toLowerCase","includes","target","value","setState","state","SearchBar","RobotCardList","href","style","color","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4751d874.chunk.js","sourcesContent":["import React from 'react'\r\nimport './robotCard.css'\r\n\r\nconst robotCard = (props) => {\r\n\r\n\treturn (\r\n\t\t\r\n\t\t<div className=\"robot-card dib shadow-1 pa5 ma3 bg-light-green grow\" onClick={(event) => props.robotClick(event, {name:props.name,email:props.email} )}>\r\n\r\n\t\t\t<img src={\"https://robohash.org/\"+props.name+\"?size=200x200\"} alt=\"robot\"/>\r\n\t\t\t<h1>{props.name}</h1>\r\n\t\t\t<p>{props.email}</p>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default robotCard","import React from 'react'\r\nimport RobotCard from './RobotCard/RobotCard.js'\r\n\r\nconst robotCardList = (props) => {\r\n\r\n\tlet robotsList = props.robots.map((robot, index) => {\r\n\r\n\t \treturn <RobotCard key={robot.name} \r\n\t\t\t\t\t\t  name={robot.name}\r\n\t\t\t\t\t\t  email={robot.email} \r\n\t\t\t\t\t\t  robotClick={props.robotClick} />\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div className=\"tc mt5\">\r\n\t\t{robotsList}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n\r\nexport default robotCardList","import React from 'react'\r\n\r\n\r\nconst searchBar = (props) => {\r\n\r\n\treturn (\r\n\r\n\t\t<form class=\"tc\">\r\n\t\t    <input id=\"name\" class=\"input-reset ba b--black-20 pa3\" placeholder=\"Search your robot friend\" type=\"text\" aria-describedby=\"name-desc\" onChange={props.searchTyping}/>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nexport default searchBar","export const robots = [\r\n\t\r\n\t{\r\n\t\tname: \"Tangui Delor\",\r\n\t\temail: \"tangui@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tname: \"John Doe\",\r\n\t\temail: \"johndoe@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tname: \"Medard\",\r\n\t\temail: \"medard@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tname: \"Gabrielle\",\r\n\t\temail: \"gabira@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tname: \"Robert\",\r\n\t\temail: \"robert@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tname: \"Emilie\",\r\n\t\temail: \"emilie@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tname: \"Rosine\",\r\n\t\temail: \"rosine@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tname: \"Elodie\",\r\n\t\temail: \"elodie@gmail.com\"\r\n\t},\r\n\t{\r\n\t\tname: \"Alfred\",\r\n\t\temail: \"alfred@gmail.com\"\r\n\t}\r\n\t,\r\n\t{\r\n\t\tname: \"Georges\",\r\n\t\temail: \"georges@gmail.com\"\r\n\t}\r\n\t,\r\n\t{\r\n\t\tname: \"Papi\",\r\n\t\temail: \"papi@gmail.com\"\r\n\t}\r\n\t,\r\n\t{\r\n\t\tname: \"Mami\",\r\n\t\temail: \"mami@gmail.com\"\r\n\t}\r\n];\r\n\r\n/* pass: delo12345 */","import React, {Component} from 'react'\nimport RobotCardList from './RobotCardList/RobotCardList.js'\nimport SearchBar from './SearchBar/SearchBar.js'\nimport {robots} from \"./robotsData.js\"\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n\n    super(props);\n\n    this.state = {\n\n      robots: robots\n    }\n  }\n\n\n  handleRobotClick = (event, robot) => {\n\n    window.responsiveVoice.speak('I am a robot, my name is '+robot.name);\n  }\n\n\n  handleSearch = (event) => {\n\n    const robotsFilter = robots.filter(robot => robot.name.toLowerCase().includes(event.target.value.toLowerCase()))\n\n    this.setState({ robots: robotsFilter })\n  }\n\n\n  render() {\n\n    return (\n      <div className=\"App App-header\">\n\n        <h1 className=\"tc normal mv5 title\"> robotsfriends </h1>\n\n        <SearchBar searchTyping={this.handleSearch} />\n\n        <RobotCardList robots={this.state.robots} robotClick={this.handleRobotClick}/>\n\n        <footer className=\"tc mv4 white f4\">\n          &copy; 2020 All rights reserved <br/>\n          <span className=\"f5\">Powered by <a target=\"blank\" href=\"https://github.com/joker7blue\" style={{color: \"orange\"}}>Joker7Blue</a></span>\n        </footer>\n\n      </div>\n    )\n  }\n\n  \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}